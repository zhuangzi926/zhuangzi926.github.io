<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xinlu&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xinlu.cool/"/>
  <updated>2020-09-29T12:30:53.255Z</updated>
  <id>http://xinlu.cool/</id>
  
  <author>
    <name>xinlu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>统计学基础复习——离散随机变量及其分布</title>
    <link href="http://xinlu.cool/Online-Courses/harvard-statistics-1/"/>
    <id>http://xinlu.cool/Online-Courses/harvard-statistics-1/</id>
    <published>2020-09-19T01:48:02.000Z</published>
    <updated>2020-09-29T12:30:53.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念引入"><a href="#概念引入" class="headerlink" title="概念引入"></a>概念引入</h1><h2 id="随机变量的定义"><a href="#随机变量的定义" class="headerlink" title="随机变量的定义"></a>随机变量的定义</h2><blockquote><p>给定样本空间S，随机变量是一个从样本空间S映射到实数域R的函数，一般用大写英文字母表示。</p></blockquote><h2 id="通过例子来理解定义"><a href="#通过例子来理解定义" class="headerlink" title="通过例子来理解定义"></a>通过例子来理解定义</h2><p>以“抛硬币”游戏为例，连续抛两次硬币，每次抛硬币的结果要么是 $H$ (Head)，要么是 $T$ (Tail)，那么抛硬币的结果样本空间就是 ${HH, HT, TH, TT}$  。</p><p>假设 $X$ 是表示硬币头部向上次数的随机变量，那么很明显：</p><p>$$<br>X(HH) = 2 \<br>X(HT) = X(TH) = 1 \<br>X(TT) = 0<br>$$</p><p>如果再用随机变量 $Y$ 来表示硬币头部向下，$Y$ 就可以表示成：</p><p>$$<br>Y = 2 - X<br>$$</p><p>或者</p><p>$$<br>Y(s) = 2 - X(s)<br>$$</p><p>此处的 $s$ 表示样本空间中的一次抽样结果。</p><h2 id="理解随机变量的随机性-Random-和数值性-Numeric"><a href="#理解随机变量的随机性-Random-和数值性-Numeric" class="headerlink" title="理解随机变量的随机性(Random)和数值性(Numeric)"></a>理解随机变量的随机性(Random)和数值性(Numeric)</h2><p>对于一次抽样结果 $s \in S$，在抽样之前，我们不知道 $s$ 具体的结果是什么，因此也不知道 $X$ 的值究竟是什么，尽管在此时我们可以计算 $X$ 取特定值或特定值域的概率。</p><p>而抽样实验以后（引入随机性），$s$ 固定成了一个抽样结果，随机变量 $X$ 也就固定成了一个具体的数值 $X(s)$ （引入数值性）。</p><h2 id="容易误解的地方"><a href="#容易误解的地方" class="headerlink" title="容易误解的地方"></a>容易误解的地方</h2><p>$P(X = x)$ 表示事件 ${X = x}$ 的概率，更加准确的写法是 ${s \in S : X(s) = x}$ ，这里的 $s$ 也可以表示一个随机事件，也就是样本空间的一个子集。</p><h1 id="伯努利分布-Bernoulli"><a href="#伯努利分布-Bernoulli" class="headerlink" title="伯努利分布(Bernoulli)"></a>伯努利分布(Bernoulli)</h1><h2 id="公式定义"><a href="#公式定义" class="headerlink" title="公式定义"></a>公式定义</h2><p>$X \sim Bern(p)$ 满足：</p><p>$$<br>P(X = 1) = p \<br>P(X = 0) = 1 - p \<br>p \in (0, 1)<br>$$</p><p>伯努利分布并不是一个分布，而是“一族分布”， $p$ 是伯努利分布的参数。</p><h2 id="伯努利实验-Bernoulli-Trail"><a href="#伯努利实验-Bernoulli-Trail" class="headerlink" title="伯努利实验(Bernoulli Trail)"></a>伯努利实验(Bernoulli Trail)</h2><p>一个实验的结果要么是“成功”，要么是“失败”，那么就可以称之为伯努利实验。</p><h1 id="二项分布（Binomial-distribution）"><a href="#二项分布（Binomial-distribution）" class="headerlink" title="二项分布（Binomial distribution）"></a>二项分布（Binomial distribution）</h1><h2 id="故事定义"><a href="#故事定义" class="headerlink" title="故事定义"></a>故事定义</h2><p>假设进行 $n$ 次伯努利实验，每次实验的成功率都是 $p$ ，设随机变量 $X$ 为成功的伯努利实验总数，那么 $X$ 的分布被称为参数为 $n, p$ 的二项分布。</p><h2 id="PMF"><a href="#PMF" class="headerlink" title="PMF"></a>PMF</h2><p>$X \sim Bin(n, p)$ 满足：</p><p>$$<br>P(X = k) = \left( \begin{array}{c} n \ k \end{array} \right) p^k (1-p)^{n-k} \<br> for~~k = 0, 1, …, n<br>$$</p><h2 id="推论"><a href="#推论" class="headerlink" title="推论"></a>推论</h2><ol><li>设 $X \sim Bin(n, p)$，并且 $q = 1 - p$，那么新随机变量 $n - X \sim Bin(n, q)$</li><li>设 $X \sim Bin(n, p), p = 1/2$，并且 $n$ 是奇数，那么随机变量 $X$ 关于 $n/2$ 对称，即</li></ol><p>$$<br>P(X = k) = P(n - X = k) = P(X = n - k)<br>$$</p><ol start="3"><li>（可加性）设 $X \sim Bin(n, p)$ ， $Y \sim Bin(m, p)$ ，并且 $X$ 与 $Y$ 相互独立，那么</li></ol><p>$$<br>X + Y \sim Bin(n + m, p)<br>$$</p><h2 id="vs-伯努利分布"><a href="#vs-伯努利分布" class="headerlink" title="vs 伯努利分布"></a>vs 伯努利分布</h2><p>$X \sim Bin(n, p)$ 可以看作：</p><p>$$<br>X = X_1 + … + X_n \<br>X_i \sim i.i.d. ~~ Bern(p)<br>$$</p><h1 id="超几何分布（Hypergeometric-distribution）"><a href="#超几何分布（Hypergeometric-distribution）" class="headerlink" title="超几何分布（Hypergeometric distribution）"></a>超几何分布（Hypergeometric distribution）</h1><h2 id="故事定义-1"><a href="#故事定义-1" class="headerlink" title="故事定义"></a>故事定义</h2><p>假设一个装满了黑白球的瓶子内有 $w$ 个白球，$b$ 个黑球，从瓶中不放回随机抽取 $n$ 个球，抽中每个球的概率等可能，$\left( \begin{array}{c} w+b \ n \end{array} \right)$ 种抽取情况都等可能。设随机变量 $X$ 为抽中白球的个数，那么 $X$ 的分布被称为参数为 $w, b, n$ 的超几何分布。</p><h2 id="PMF-1"><a href="#PMF-1" class="headerlink" title="PMF"></a>PMF</h2><p>$ X \sim HGeom(w, b, n)$ 满足：</p><p>$$<br>P(X = k) = \frac{\left( \begin{array}{c} w \ k \end{array} \right) \left( \begin{array}{c} b \ n - k \end{array} \right)} {\left( \begin{array}{c} w + b \ n \end{array} \right)}<br>$$</p><h2 id="推论-1"><a href="#推论-1" class="headerlink" title="推论"></a>推论</h2><p>$HGeom(w, b, n)$ 与 $HGeom(n, w + b - n, w)$ 同构。</p><h2 id="vs-二项分布"><a href="#vs-二项分布" class="headerlink" title="vs 二项分布"></a>vs 二项分布</h2><ol><li>二项分布中的多个伯努利实验是相互独立的，而超几何分布的多个伯努利实验是相关的。</li><li>设 $X \sim Bin(n, p)$，$Y \sim Bin(m, p)$，并且$X$与$Y$相互独立，</li><li>（超几何分布可以看做二项分布的极限）设$X \sim BIn(n, p)$ 并且 $N = w + b \rightarrow \infty$ ，即$p = w / \left(w + b\right)$基本上固定不变，那么</li></ol><p>$$<br>PMF_X \rightarrow PMF_{Bin(n, p)}<br>$$</p><h1 id="离散均匀分布（Discrete-Uniform-distribution）"><a href="#离散均匀分布（Discrete-Uniform-distribution）" class="headerlink" title="离散均匀分布（Discrete Uniform distribution）"></a>离散均匀分布（Discrete Uniform distribution）</h1><h2 id="故事定义-2"><a href="#故事定义-2" class="headerlink" title="故事定义"></a>故事定义</h2><p>假设 $C$ 是一个非空有限的数字集合，任意等可能地从中选择一个数字，设选中的数字为随机变量 $X$ ，那么 $X$ 的分布被称为离散均匀分布。</p><h2 id="PMF-2"><a href="#PMF-2" class="headerlink" title="PMF"></a>PMF</h2><p>$X \sim DUnif(C)$ 满足：</p><p>$$<br>P(X = x) = \frac{1}{|C|} \<br>for~~x \in C<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念引入&quot;&gt;&lt;a href=&quot;#概念引入&quot; class=&quot;headerlink&quot; title=&quot;概念引入&quot;&gt;&lt;/a&gt;概念引入&lt;/h1&gt;&lt;h2 id=&quot;随机变量的定义&quot;&gt;&lt;a href=&quot;#随机变量的定义&quot; class=&quot;headerlink&quot; title=&quot;随机变
      
    
    </summary>
    
    
      <category term="Online Courses" scheme="http://xinlu.cool/categories/Online-Courses/"/>
    
    
      <category term="Statistics" scheme="http://xinlu.cool/tags/Statistics/"/>
    
      <category term="Mathematics" scheme="http://xinlu.cool/tags/Mathematics/"/>
    
  </entry>
  
  <entry>
    <title>以std::mutex为基础，探索线程间共享数据的方法</title>
    <link href="http://xinlu.cool/Reading-Notes/cppconcurrency-2/"/>
    <id>http://xinlu.cool/Reading-Notes/cppconcurrency-2/</id>
    <published>2020-07-21T04:17:37.000Z</published>
    <updated>2020-07-22T02:25:27.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>多线程编程的优势之一在于线程间共享数据的开销很小。</p><p>“灵活地在线程间共享数据，最大化地利用并发处理优势“，听起来很美好，实际上处处是坑。</p><a id="more"></a><ul><li>多个线程对同一个数据结构的读写操作，如果处理不好，就会出现“脏读”、“幻读”等bug（借用数据库中的概念）；</li><li>使用锁机制来保护共享的数据，如果多个线程分别持有不同的锁，却互相请求对方持有的锁，就会出现“死锁”bug（极难复现调试）；</li><li>锁的粒度设计太大，就无法充分利用多线程并发的速度优势；</li><li>锁的粒度设计太小，出现bug的可能性也随之增加，逼迫程序员付出大量心智成本；</li></ul><p>C++ Concurrency in Action认为，使用多线程共享数据的坑主要有两个：</p><ul><li>problematic race condition</li><li>deadlock</li></ul><p>如何利用C++ STL和boost中的facilities来规避大坑、并且设计出良好的代码结构，是这里讨论的重点。</p><h1 id="Race-Condition"><a href="#Race-Condition" class="headerlink" title="Race Condition"></a>Race Condition</h1><p>如果数据是read-only的，那么多线程操作不会带来任何问题，但如果可读可写，那么多线程读写的顺序就会带来一系列问题（毕竟，不加锁的情况下，没法控制多个并发线程执行顺序），这里就引入了“线程竞态”（race condition）的概念。</p><h2 id="什么是race-condition，它会给多线程编程带来什么？"><a href="#什么是race-condition，它会给多线程编程带来什么？" class="headerlink" title="什么是race condition，它会给多线程编程带来什么？"></a>什么是race condition，它会给多线程编程带来什么？</h2><p>如果多个线程执行同一操作的结果依赖于多个线程的执行顺序（顺序不同，结果不同），那么这就叫race condition。</p><p>race condition并不一定是坏事，多个用户线程的竞争用在抢票系统、抢红包系统上就没有问题。真正有问题的是<strong>problematic race condition</strong>。C++标准中定义的<strong>data race</strong>就是一种problematic race condition，它表示并发地对同一个对象进行修改，这是一个undefined behavior。</p><p>problematic race condition常常发生在一个操作要修改多个数据的情形下。例如，在删除双向链表中的一个元素时，我们需要对三个链表元素（节点a、待删除节点b、节点c）进行操作，那么在删除的过程中，</p><ol><li>必然会先破坏原有数据结构（节点a的后指针指向节点c，但节点c的前指针还指向待删除的节点b），</li><li>然后再恢复数据结构（节点a、c相连，但节点b的前指针和后指针还没变），</li><li>最后进行删除操作（delete 节点b），</li></ol><p>在这一过程中，其他线程可能在删除操作尚未结束时读取到错误的链表数据。</p><h2 id="如何防止problematic-race-condition"><a href="#如何防止problematic-race-condition" class="headerlink" title="如何防止problematic race condition"></a>如何防止problematic race condition</h2><p>C++ Concurrency in Action介绍了三种防止problematic race condition的方法：</p><ol><li>在数据结构外包裹一层保护机制（protection mechanism）</li><li>修改数据结构的接口，让修改操作原子化（indivisible）</li><li>把修改操作当做“事务”（transaction）来处理，实现all-or-nothing的效果</li></ol><p>利用 <code>std::mutex</code> 的相关机制，可以灵活地选用方法1或方法2，来设计出线程安全的数据结构。</p><h2 id="线程安全的list"><a href="#线程安全的list" class="headerlink" title="线程安全的list"></a>线程安全的list</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; some_list;</span><br><span class="line"><span class="built_in">std</span>::mutex some_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_to_list</span><span class="params">(<span class="keyword">int</span> new_value)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">guard</span><span class="params">(some_mutex)</span></span>;</span><br><span class="line">    some_list.push_back(new_value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">list_contains</span><span class="params">(<span class="keyword">int</span> value_to_find)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">guard</span><span class="params">(some_mutex)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">find</span>(some_list.<span class="built_in">begin</span>(), some_list.<span class="built_in">end</span>(), value_to_find) </span><br><span class="line">        != some_list.<span class="built_in">end</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，被保护的数据结构是 <code>some_list</code> ，<code>some_mutex</code> 被用来标识临界区代码。</p><p>如果某个线程对 <code>some_mutex</code> 上锁，那么其他线程只能等待这个线程解锁，否则无法执行 <code>some_mutex</code> 对应的临界区代码。这样就起到了保护 <code>some_list</code> 内数据不被同时读写的效果。</p><p><code>std::lock_guard&lt;&gt;</code> 对象充分利用了RAII的特性，对象初始化后就上锁，对象被析构时自动解锁，不需要程序员来手动lock和unlock。这是一种好的编程习惯，尽可能地解放程序员，把mutex上锁的周期与另一个对象的生命周期绑定。</p><p>因为C++语言的灵活性，<code>std::mutex</code> 的锁机制并不是一劳永逸的，</p><ul><li>如果被保护的数据被指针传递、引用传递到临界区以外后，就不再受到保护，</li><li>如果临界区代码需要调用用户自定义的函数（恶意地取出数据地址），那么 <code>std::mutex</code> 也无法起到保护作用。</li></ul><h2 id="线程安全的stack"><a href="#线程安全的stack" class="headerlink" title="线程安全的stack"></a>线程安全的stack</h2><p>在讨论线程安全的stack前，有必要回顾一下 <code>std::stack</code> 在设计时避开的坑：为什么 <code>.pop()</code> 操作不返回栈顶元素，而需要让用户先调用 <code>.top()</code> 取出栈顶元素，再 <code>.pop()</code> 出栈？</p><p>为了节约篇幅，这里不作讨论，直接放上结论：</p><ul><li>如果 <code>.pop()</code> 操作允许返回栈顶元素的值，那么必然要把该元素的值copy出来，</li><li>那么，<code>auto a = s.pop()</code> 操作实际上分成了两步：<ul><li>修改 <code>s</code> 的数据结构，去掉栈顶元素，</li><li>调用栈顶元素的 <code>copy assignment operator</code> ，给 <code>a</code> 赋值，</li></ul></li><li>大坑在第二步：如果给 <code>a</code> 赋值的操作 <strong>抛出异常</strong> ，那么就会出现 <strong>栈顶元素已经抛出，但是无法返回</strong> 的情形，那么相当于我们白白丢失了栈顶元素（既不在栈里，也不在栈外），而且没有人知道它的值是啥，这个错误甚至是无法补救的，</li><li>为了防止这个大坑，标准库的设计者把出栈操作设计成两步，让用户先读取，后出栈，</li></ul><p>因此，在 <code>std::stack</code> 的基础上设计线程安全的栈，就是要给 <code>.top() + .pop()</code> 套一层保护机制，既要保护多线程读取的安全性、又要考虑拷贝操作的脆弱性。</p><p>比较直观的方法是逼迫用户只使用copy/move操作不会抛出异常的类，这种方法局限性比较大。以下两种方法更加自然一些。</p><p><strong>方法一：返回一个 <code>std::shared_ptr&lt;&gt;</code></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::mutex some_mutex;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">stack</span>&lt;T&gt; data;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;T&gt; <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">guard</span><span class="params">(some_mutex)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (data.empty()) <span class="keyword">throw</span> empty_stack();</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::shared ptr&lt;T&gt; <span class="keyword">const</span> <span class="title">res</span><span class="params">(<span class="built_in">std</span>::make_shared&lt;T&gt;(data.top()))</span></span>;</span><br><span class="line">    data.pop();</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法相当于避开了“拷贝-销毁”的流程，始终只保留一个对象。</p><p><strong>方法二：引用传递</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(T&amp; value)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">guard</span><span class="params">(some_mutex)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (data.empty()) <span class="keyword">throw</span> empty_stack();</span><br><span class="line">    value = data.top();</span><br><span class="line">    data.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用传递的好处是如果copy过程抛出了异常，那么stack就不会被修改。坏处是用户需要提前构造好一个空对象。</p><h1 id="Dead-Lock"><a href="#Dead-Lock" class="headerlink" title="Dead Lock"></a>Dead Lock</h1><p>死锁是一种非常有趣的bug，多个线程在持有锁的同时互相请求对方持有的锁，程序就卡死在这里。</p><p>这个概念第一次在操作系统中学习到，当时探讨了避免死锁、检测死锁、消除死锁的方法，但是在多线程编程中，最好还是从代码设计上根本性地杜绝死锁的产生，毕竟死锁的debug相当相当困难。</p><h2 id="如何防止代码产生死锁？"><a href="#如何防止代码产生死锁？" class="headerlink" title="如何防止代码产生死锁？"></a>如何防止代码产生死锁？</h2><p>死锁一般产生于一个操作需要对多个mutex上锁的场景。C++ Concurrency in Action给出了四条避免死锁的编程指南：</p><ol><li>不要给已经上锁的部分再加锁，</li><li>上锁后避免调用用户自定义的函数，</li><li>如果需要给多个mutex上锁，那就要保证每次操作时加锁的顺序一致，</li><li>将代码按层次切分，每个层次加不同的锁，确保一个固定的顺序（例如，从高层次锁-&gt;低层次锁，否则报错），</li></ol><p>避免死锁需要类的设计者和类的使用者严格地自律、遵守规则。</p><p>以下探讨如何利用C++ STL和Boost的facilities来设计无死锁的代码。</p><h2 id="线程安全的swap-v1-0"><a href="#线程安全的swap-v1-0" class="headerlink" title="线程安全的swap v1.0"></a>线程安全的swap v1.0</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(X&amp; lhs, X&amp; rhs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (&amp;lhs == &amp;rhs) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">std</span>::lock(lhs.m, rhs.m);</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock_a</span><span class="params">(lhs.m, <span class="built_in">std</span>::adopt_lock)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock_a</span><span class="params">(rhs.m, <span class="built_in">std</span>::adopt_lock)</span></span>;</span><br><span class="line">    swap(lhs.some_detail, rhs.some_detail);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>std::lock()</code>的上锁操作是原子化的，能同时对多个mutex上锁。</p><p>把 <code>std::adopt_lock</code> 作为参数传入 <code>std::lock_guard&lt;&gt;</code> ，就是告诉 <code>lock_a</code> ， <code>lock_b</code> 只需要获得当前mutex的拥有权，不要再给mutex上锁。</p><p>如果 <code>std::lock()</code> 对任何一个mutex上锁失败，那么已经上锁的部分会被释放，实现all-or-nothing的效果。</p><h2 id="层次锁"><a href="#层次锁" class="headerlink" title="层次锁"></a>层次锁</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">hierarchical_mutex <span class="title">high_level_mutex</span><span class="params">(<span class="number">10000</span>)</span></span>;</span><br><span class="line"><span class="function">hierarchical_mutex <span class="title">low_level_mutex</span><span class="params">(<span class="number">5000</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_low_level_stuff</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">low_level_func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::lock_guard&lt;hierarchical_mutex&gt; <span class="title">lk</span><span class="params">(low_level_mutex)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> do_low_level_stuff();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_high_level_stuff</span><span class="params">(<span class="keyword">int</span> some_param)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">high_level_func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::lock_guard&lt;hierarchical_mutex&gt; <span class="title">lk</span><span class="params">(high_level_mutex)</span></span>;</span><br><span class="line">    do_high_level_stuff(low_level_func());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把代码分层次，用不同的mutex来控制不同层次的锁。</p><p>当低层次mutex被锁时，高层次mutex不能再上锁，否则在runtime报错。</p><p>10000，5000指的是layer number（第几层），数字越大越先上锁。</p><p>这个 <code>hierarchical_mutex</code> 是自定义的，实现代码比较冗长，这里不展开了。实现的核心是三个变量：</p><ul><li>常量hierarchy_value保存本mutex的层号</li><li>thread_local static变量保存本线程当前运行的层号</li><li>变量previous_hierarchy_value储存本线程之前的层号</li></ul><h2 id="线程安全的swap-v2-0"><a href="#线程安全的swap-v2-0" class="headerlink" title="线程安全的swap v2.0"></a>线程安全的swap v2.0</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(X&amp; lhs, X&amp; rhs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (&amp;lhs == &amp;rhs)<span class="keyword">return</span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock_a</span><span class="params">(lhs.m, <span class="built_in">std</span>::defer_lock)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock_b</span><span class="params">(rhs.m, <span class="built_in">std</span>::defer_lock)</span></span>;</span><br><span class="line">    <span class="built_in">std</span>::lock(lock_a, lock_b);</span><br><span class="line">    swap(lhs.some_detail, rhs.some_detail);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>std::unique_lock</code> 可以不拥有mutex（传入 <code>std::defer_lock</code> 参数），只在需要的时候请求对指定的mutex上锁。</p><p>如果 <code>std::unique_lock</code> 拥有mutex，那么析构时unlock，否则，析构时一定不unlock。</p><p><code>std::unique_lock</code> 对mutex的拥有权可以用过 <code>.owns_lock()</code> 来查询。</p><p><code>std::unique_lock</code> 是典型的可movable不可copyable的类，可以灵活使用它的move semantics来转移mutex的所有权，范例如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">get_lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="built_in">std</span>::mutex some_mutex;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lk</span><span class="params">(some_mutex)</span></span>;</span><br><span class="line">    prepare_data();</span><br><span class="line">    <span class="keyword">return</span> lk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_data</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lk</span><span class="params">(get_lock())</span></span>;</span><br><span class="line">    do_something();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>std::unique_lock</code> 支持灵活地lock与unlock操作，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_and_process_data</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">my_lock</span><span class="params">(the_mutex)</span></span>;</span><br><span class="line">    some_class data_to_process = get_next_data_chunk();</span><br><span class="line">    my_lock.unlock();</span><br><span class="line">    result_type result = <span class="built_in">process</span>(data_to_process);</span><br><span class="line">    my_lock.lock();</span><br><span class="line">    write_result(data_to_process, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="选择合适的锁粒度"><a href="#选择合适的锁粒度" class="headerlink" title="选择合适的锁粒度"></a>选择合适的锁粒度</h1><p>锁的粒度取决于两个因素：</p><ol><li>上锁的时间长短</li><li>对哪些操作上锁</li></ol><p>一般来说，最佳的上锁时长 = 完成指定操作的最小时长。</p><p>另外，应该尽可能避免在已经上锁的情况下进行文件IO或者请求另一个锁（耗时过长）；上锁时长必须覆盖整个操作过程，否则就会产生race condition。</p><h1 id="其他保护数据的机制"><a href="#其他保护数据的机制" class="headerlink" title="其他保护数据的机制"></a>其他保护数据的机制</h1><h2 id="线程安全的对象初始化"><a href="#线程安全的对象初始化" class="headerlink" title="线程安全的对象初始化"></a>线程安全的对象初始化</h2><p>有些对象的初始化操作开销很大，需要耗费很长时间，比如数据库的connection初始化。针对这类对象，我们可以把它们设置成lazy initialization的，不需要的时候（离线访问本地缓存）只要维护一个空的 <code>std::shared_ptr&lt;&gt;</code> 指针，需要的时候（连接远程数据库同步）再给它 <code>new</code> 一个新的对象。</p><p>但在多线程编程中，麻烦就来了：</p><ul><li>对象可能还没初始化、也可能正在初始化过程中、也可能刚刚初始化完毕，而其他线程并不知道，</li><li>如果多个线程对同一个指针执行 <code>new</code> 操作，就可能出现 <strong>data race</strong> （undefined behavior），</li><li>如果要把“对象是否已经被初始化or正在被初始化”这个flag信息在多个线程之间同步，就要引入一个线程安全的bool变量，</li></ul><p>C++ 标准考虑到了这一麻烦之处，并提供了 <code>std::once_flag</code> 和 <code>std::call_once</code> 来实现线程安全的对象初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;some_resource&gt; resource_ptr;</span><br><span class="line"><span class="built_in">std</span>::once_flag resource_flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_resource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    resource_ptr.reset(<span class="keyword">new</span> some_resource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::call_once(resource_flag, init_resource);</span><br><span class="line">    resource_ptr-&gt;do_something();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程安全的局部静态变量初始化"><a href="#线程安全的局部静态变量初始化" class="headerlink" title="线程安全的局部静态变量初始化"></a>线程安全的局部静态变量初始化</h2><p>局部的static类型变量在C/C++语言中是很有意思的存在，当程序第一次执行到变量声明代码时，该变量即被创建，此后一直不销毁。</p><p>但在多线程编程中，这一特性也引来一个棘手之处：如果多个线程并发执行，怎么保证局部static类型变量只被初始化一次？</p><p>许多古老的C++编译器在这一点上都束手无策，幸好，<strong>C++11强制保证了local static variable的初始化是线程安全的</strong> ，当第一个线程开始初始化时，其他线程自动hang住等待，并且保证只会初始化一次。</p><h2 id="共享锁和排它锁"><a href="#共享锁和排它锁" class="headerlink" title="共享锁和排它锁"></a>共享锁和排它锁</h2><p>对象的读和写频率并不一定是相等的，针对读多写少的对象，我们完全可以允许多个线程对它进行并发地“读“，而只允许一个线程对它进行“写”（此时不允许其他线程读or写）。不难看出，这种情况下读写操作的权重是不一样的，我们需要用两种不同的锁来限制并发读写的权限。</p><p>这里就引入了“共享锁”（shared lock）和“排它锁”（exclusive lock）的概念（数据库中第一次学到）：</p><ul><li>如果任何线程持有共享锁，其他线程对排它锁的请求被阻塞，直到所有的共享锁被释放，</li><li>如果任何线程有排它锁，其他线程就不能再请求排它锁or共享锁，直到排它锁被释放，</li></ul><p>C++ STL暂时还没有共享锁的实现，但可以使用boost库中的 <code>boost::shared_lock&lt;boost::shared_mutex&gt;</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread/shared_mutex.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dns_entry</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dns_cache</span> &#123;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, dns_entry&gt; entries;</span><br><span class="line">    <span class="keyword">mutable</span> boost::shared_mutex entry_mutex;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">dns_entry <span class="title">find_entry</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span> &amp;domain)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="function">boost::shared_lock&lt;boost::shared_mutex&gt; <span class="title">lk</span><span class="params">(entry_mutex)</span></span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, dns_entry&gt;::const_iterator <span class="keyword">const</span> it = entries.<span class="built_in">find</span>(domain);</span><br><span class="line">        <span class="keyword">return</span> (it == entries.<span class="built_in">end</span>()) ? dns_entry(): it-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update_or_add_entry</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span> &amp;domain, dns_entry <span class="keyword">const</span> &amp;dns_details)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::lock_guard&lt;boost::shared_mutex&gt; <span class="title">lk</span><span class="params">(entry_mutex)</span></span>;</span><br><span class="line">        entries[domain] = dns_details;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在以上代码中，</p><ul><li><code>boost::shared_lock&lt;boost::shared_mutex&gt;</code> 实现了对共享锁的加锁，</li><li><code>std::lock_guard&lt;boost::shared_mutex&gt;</code> 实现了对排它锁的加锁。</li></ul><h2 id="可重入的mutex"><a href="#可重入的mutex" class="headerlink" title="可重入的mutex"></a>可重入的mutex</h2><p>C++ STL提供了 <code>std::recursive_mutex</code> ，支持一个线程对它上n次锁，但该线程必须释放n次锁后，其他线程才能对它上锁。</p><p>尽可能不要使用可重入的mutex，这是一种糟糕的设计。</p><h1 id="总结与思考：关于lock-guard和unique-lock"><a href="#总结与思考：关于lock-guard和unique-lock" class="headerlink" title="总结与思考：关于lock_guard和unique_lock"></a>总结与思考：关于lock_guard和unique_lock</h1><p>为了厘清一些叙述上的模糊，有必要再把一些概念拎出来说清楚，以下是我自己的理解。</p><p><strong>为什么要使用它们？</strong></p><p>mutex提供了lock和unlock的操作，程序员的确可以直接对mutex加锁，但是在复杂代码中，unlock操作需要考虑很多情况（异常处理等），使用lock_guard和unique_lock将unlock的控制权交给了析构函数，解放了程序员。</p><p><strong>它们如何与某个mutex绑定？</strong></p><p>lock_guard和unique_lock在初始化时，就与参数中传入的mutex相互绑定（associated）。</p><p><strong>它们如何获得某个mutex的所有权？</strong></p><ul><li><p>对lock_guard来说，在初始化时就获得了mutex的所有权；</p></li><li><p>对unique_lock来说，</p><ul><li>如果初始化时不传入其他参数，即获得mutex的所有权，</li><li>如果初始化时传入 <code>std::defer_lock</code> ，那么只相互绑定，不获取所有权，</li></ul></li></ul><p><strong>它们如何对绑定的mutex加锁？</strong></p><ul><li>对lock_guard来说，有两种加锁方式，<ul><li>先使用 <code>std::lock()</code> 或其他方式加锁，然后初始化lock_guard对象，并传入额外参数 <code>std::adopt_lock</code> 表示只获取所有权，不重复加锁，</li><li>在初始化时不传入额外参数，直接绑定+获取所有权+加锁，</li></ul></li><li>对unique_lock来说，也有两种加锁方式，<ul><li>在初始化时不传入额外参数，直接绑定+获取所有权+加锁，</li><li>在初始化时传入额外参数 <code>std::defer_lock</code> ，表示只相互绑定，不获取所有权，不加锁，之后再使用 <code>std::lock()</code> 或者 <code>.lock()</code> 方法进行加锁（加锁的同时也获得了所有权），</li></ul></li></ul><p><strong>它们如何对绑定的mutex解锁？</strong></p><ul><li>对lock_guard来说，析构时自动对拥有的mutex解锁，</li><li>对unique_lock来说，<ul><li>析构时，如果unique_lock拥有mutex的所有权，那么自动解锁，</li><li>析构时，如果unique_lock不拥有mutex的所有权，那么不解锁，</li><li>程序员可以手动对已经上锁的unique_lock调用 <code>.unlock()</code> ，调用完后解锁+丧失所有权。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;多线程编程的优势之一在于线程间共享数据的开销很小。&lt;/p&gt;
&lt;p&gt;“灵活地在线程间共享数据，最大化地利用并发处理优势“，听起来很美好，实际上处处是坑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reading Notes" scheme="http://xinlu.cool/categories/Reading-Notes/"/>
    
    
      <category term="C++" scheme="http://xinlu.cool/tags/C/"/>
    
      <category term="Concurrency" scheme="http://xinlu.cool/tags/Concurrency/"/>
    
      <category term="C++ Concurrency in Action" scheme="http://xinlu.cool/tags/C-Concurrency-in-Action/"/>
    
  </entry>
  
  <entry>
    <title>调包侠工具箱：tf.data.Dataset</title>
    <link href="http://xinlu.cool/Machine-Learning/tf-data-Dataset/"/>
    <id>http://xinlu.cool/Machine-Learning/tf-data-Dataset/</id>
    <published>2020-06-29T07:36:29.000Z</published>
    <updated>2020-06-30T16:48:43.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是个啥？"><a href="#这是个啥？" class="headerlink" title="这是个啥？"></a>这是个啥？</h2><ul><li>tf.data.Dataset包含数据集导入、预处理、导出的高级api</li><li>适用于数据量可以分批导入内存的场景</li><li>可以通过简单的api实现流水线处理</li><li><strong>这货本质是个封装程度非常高的IO Adapter</strong></li></ul><a id="more"></a><h2 id="Dataset创建"><a href="#Dataset创建" class="headerlink" title="Dataset创建"></a>Dataset创建</h2><h3 id="与导入操作有关的api"><a href="#与导入操作有关的api" class="headerlink" title="与导入操作有关的api"></a>与导入操作有关的api</h3><ul><li>从<code>python list</code>导入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset = tf.data.Dataset.from_tensor_slices([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><ul><li>从<code>txt</code>文件导入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataset = tf.data.TextLineDataset([</span><br><span class="line">  <span class="string">"file1.txt"</span>, </span><br><span class="line">  <span class="string">"file2.txt"</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li>从<code>TFRecord</code>导入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataset = tf.data.TFRecordDataset([</span><br><span class="line">    <span class="string">"file1.tfrecords"</span>, </span><br><span class="line">    <span class="string">"file2.tfrecords"</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li>从多文件导入（正则表达式）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset = tf.data.Dataset.list_files(<span class="string">"/path/*.txt"</span>)</span><br></pre></td></tr></table></figure><ul><li>其他导入方式<ul><li><code>tf.data.FixedLengthRecordDataset</code></li><li><code>tf.data.Dataset.from_generator</code></li></ul></li></ul><h3 id="一些优雅的导入姿势"><a href="#一些优雅的导入姿势" class="headerlink" title="一些优雅的导入姿势"></a>一些优雅的导入姿势</h3><ul><li>导入一个tuple</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Slicing a tuple of 1D tensors produces tuple elements containing scalar tensors.</span></span><br><span class="line">dataset = tf.data.Dataset.from_tensor_slices((</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>], </span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>], </span><br><span class="line">  [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">))</span><br><span class="line">list(dataset.as_numpy_iterator())</span><br><span class="line"><span class="comment"># [(1, 3, 5), (2, 4, 6)]</span></span><br></pre></td></tr></table></figure><ul><li>导入两个tuple</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Two tensors can be combined into one Dataset object.</span></span><br><span class="line">features = tf.constant([[<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>]]) <span class="comment"># ==&gt; 3x2 tensor</span></span><br><span class="line">labels = tf.constant([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>]) <span class="comment"># ==&gt; 3x1 tensor</span></span><br><span class="line">dataset = Dataset.from_tensor_slices((features, labels))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Both the features and the labels tensors can be converted</span></span><br><span class="line"><span class="comment"># to a Dataset object separately and combined after.</span></span><br><span class="line">features_dataset = Dataset.from_tensor_slices(features)</span><br><span class="line">labels_dataset = Dataset.from_tensor_slices(labels)</span><br><span class="line">dataset = Dataset.zip((features_dataset, labels_dataset))</span><br></pre></td></tr></table></figure><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><h3 id="Dataset级别的api"><a href="#Dataset级别的api" class="headerlink" title="Dataset级别的api"></a>Dataset级别的api</h3><ul><li><p><code>.apply()</code></p><ul><li><p>Args:</p><ul><li>transformation func, from Dataset to Dataset</li></ul></li><li><p>Rets:</p><ul><li>a new Dataset</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dataset_fn</span><span class="params">(ds)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> ds.filter(<span class="keyword">lambda</span> x: x &lt; <span class="number">5</span>)</span><br><span class="line">dataset = dataset.apply(dataset_fn)</span><br></pre></td></tr></table></figure><ul><li><code>.batch()</code><ul><li>Args:<ul><li>batch_size</li><li>drop_remainder=False</li></ul></li><li>新Dataset输出的数据新增一个维度，大小为batch_size</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset = dataset.batch(<span class="number">3</span>, drop_remainder=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li><code>.shard()</code><ul><li>Args:<ul><li>num_shards</li><li>index</li></ul></li><li>Rets:<ul><li>一个新的Dataset，只包含原Dataset的<code>1/num_shards</code>数据，而且数据在原Dataset中的下标<code>% num_shards = index</code></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset_B = dataset_A.shard(num_shards=<span class="number">3</span>, index=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li><code>.concatenate()</code><ul><li>Args:<ul><li>another Dataset</li></ul></li><li>Rets:<ul><li>a new Dataset</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = tf.data.Dataset.range(<span class="number">1</span>, <span class="number">4</span>)  <span class="comment"># ==&gt; [ 1, 2, 3 ]</span></span><br><span class="line">b = tf.data.Dataset.range(<span class="number">4</span>, <span class="number">8</span>)  <span class="comment"># ==&gt; [ 4, 5, 6, 7 ]</span></span><br><span class="line">ds = a.concatenate(b)</span><br><span class="line"><span class="comment"># ==&gt; [ 1, 2, 3, 4, 5, 6, 7 ]</span></span><br></pre></td></tr></table></figure><ul><li><code>Dataset.zip()</code><ul><li>Args:<ul><li>(Dataset, Dataset, …)</li></ul></li><li>Rets:<ul><li>a new Dataset</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = tf.data.Dataset.range(<span class="number">1</span>, <span class="number">4</span>)  <span class="comment"># ==&gt; [ 1, 2, 3 ]</span></span><br><span class="line">b = tf.data.Dataset.range(<span class="number">4</span>, <span class="number">7</span>)  <span class="comment"># ==&gt; [ 4, 5, 6 ]</span></span><br><span class="line">ds = tf.data.Dataset.zip((a, b))</span><br><span class="line"><span class="comment"># ==&gt; [(1, 4), (2, 5), (3, 6)]</span></span><br></pre></td></tr></table></figure><h3 id="字段级别的api"><a href="#字段级别的api" class="headerlink" title="字段级别的api"></a>字段级别的api</h3><ul><li><code>.filter()</code><ul><li>Args:<ul><li>predicate(func)</li></ul></li><li>Rets:<ul><li>a new Dataset, element by predicate is True</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset = dataset.filter(<span class="keyword">lambda</span> x: x &lt; <span class="number">3</span>)</span><br></pre></td></tr></table></figure><ul><li><code>.map()</code><ul><li>Args:<ul><li>map_func</li><li>num_parallel_calls(=<code>tf.data.experimental.AUTOTUNE</code>)</li><li>deterministic</li></ul></li><li>Rets:<ul><li>a new Dataset</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataset = Dataset.range(<span class="number">1</span>, <span class="number">6</span>)  <span class="comment"># ==&gt; [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line">dataset = dataset.map(<span class="keyword">lambda</span> x: x + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li><code>interleave()</code><ul><li>Args:<ul><li>map_func</li><li>cycle_length=AUTOTUNE</li><li>block_length=1</li><li>num_parallel_calls(=<code>tf.data.experimental.AUTOTUNE</code>)</li><li>deterministic=None</li></ul></li><li>Rets:<ul><li>a new Dataset</li></ul></li></ul></li></ul><p>如何理解：</p><ol><li>遍历原Dataset，用<code>map_func</code>函数处理每个字段，该过程并行度由<code>cycle_length</code>控制</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设cycle_length = 3</span></span><br><span class="line">[map_func(x1), map_func(x2), map_func(x3)] </span><br><span class="line">  =&gt; [res1, res2, res3] </span><br><span class="line">  =&gt; cycle1</span><br><span class="line"></span><br><span class="line">[map_func(x4), map_func(x5), map_func(x6)] </span><br><span class="line">  =&gt; [res4, res5, res6] </span><br><span class="line">  =&gt; cycle2</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">==&gt; cycles = [cycle1, cycle2, cycle3, ...]</span><br></pre></td></tr></table></figure><ol start="2"><li>遍历cycles，取每个cycle的<code>block_length</code>个元素后，换下一个cycle继续读取，环形遍历直到所有元素都被取出</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设block_length = 2</span></span><br><span class="line"></span><br><span class="line">cycle1 =&gt; [res1, res2]</span><br><span class="line">cycle2 =&gt; [res4, res5]</span><br><span class="line"></span><br><span class="line">cycle1 =&gt; [res3]</span><br><span class="line">cycle2 =&gt; [res6]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终结果被flatten</span></span><br><span class="line">==&gt; [res1, res2, res4, res5, res3, res6]</span><br></pre></td></tr></table></figure><ol start="3"><li>最终获得flatten后的新Dataset</li></ol><h2 id="Dataset导出"><a href="#Dataset导出" class="headerlink" title="Dataset导出"></a>Dataset导出</h2><ul><li><code>.prefetch()</code><ul><li>Args:<ul><li>buffer_size</li></ul></li><li>Rets:<ul><li>a new Dataset</li></ul></li></ul></li></ul><p>官方建议在所有Dataset的处理结束后加上<code>.prefetch()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预取两个字段</span></span><br><span class="line">dataset = dataset.prefetch(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预取两个batch</span></span><br><span class="line">dataset = dataset.batch(<span class="number">20</span>).prefetch(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li><code>.shuffle()</code><ul><li>Args:<ul><li>buffer_size</li><li>seed=None</li><li>reshuffle_each_iteration=None</li></ul></li><li>Rets:<ul><li>a new Dataset</li></ul></li></ul></li></ul><p>官方建议<code>buffer_size</code> &gt;= Dataset数据量</p><ul><li><code>.enumerate()</code><ul><li>Args:<ul><li>start=0</li></ul></li><li>Rets:<ul><li>a new Dataset，每个输出结果多了一个表示索引的维度</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dataset = tf.data.Dataset.from_tensor_slices([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">dataset = dataset.enumerate(start=<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> dataset.as_numpy_iterator():</span><br><span class="line">  print(element)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">(5, 1)</span></span><br><span class="line"><span class="string">(6, 2)</span></span><br><span class="line"><span class="string">(7, 3)</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><ul><li><code>.as_numpy_iterator()</code><ul><li>Rets:<ul><li>a new Dataset</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dataset = tf.data.Dataset.from_tensor_slices([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> dataset.as_numpy_iterator():</span><br><span class="line">  print(element)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;这是个啥？&quot;&gt;&lt;a href=&quot;#这是个啥？&quot; class=&quot;headerlink&quot; title=&quot;这是个啥？&quot;&gt;&lt;/a&gt;这是个啥？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;tf.data.Dataset包含数据集导入、预处理、导出的高级api&lt;/li&gt;
&lt;li&gt;适用于数据量可以分批导入内存的场景&lt;/li&gt;
&lt;li&gt;可以通过简单的api实现流水线处理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;这货本质是个封装程度非常高的IO Adapter&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://xinlu.cool/categories/Machine-Learning/"/>
    
    
      <category term="TensorFlow" scheme="http://xinlu.cool/tags/TensorFlow/"/>
    
      <category term="Keras" scheme="http://xinlu.cool/tags/Keras/"/>
    
  </entry>
  
  <entry>
    <title>C++并发：从std::thread()开始</title>
    <link href="http://xinlu.cool/Reading-Notes/cppconcurrency-1/"/>
    <id>http://xinlu.cool/Reading-Notes/cppconcurrency-1/</id>
    <published>2020-06-19T20:43:36.000Z</published>
    <updated>2020-06-30T16:48:23.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lt-thread-gt-头文件的作用"><a href="#lt-thread-gt-头文件的作用" class="headerlink" title="&lt;thread&gt;头文件的作用"></a><code>&lt;thread&gt;</code>头文件的作用</h2><p><code>&lt;thread&gt;</code>  是C++11新引入标准库基础设施，提供对多线程操作的支持。</p><p>我们可以用 <code>std::thread</code> 来控制线程的创建、运行、回收。</p><p>学习 <code>std::thread</code> 的用法是了解C++多线程编程的第一步。</p><a id="more"></a><h2 id="构造std-thread对象"><a href="#构造std-thread对象" class="headerlink" title="构造std::thread对象"></a>构造<code>std::thread</code>对象</h2><ul><li>方法一：传入函数对象</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">background_task</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        do_something();</span><br><span class="line">        do_something_else();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">background_task f;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">my_thread</span><span class="params">(f)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>在这种情况下，函数对象先被 <code>copy</code> 到 <code>std::thread</code> 对象的内部，然后再传参、被调用</strong></p><ul><li>方法二：传入lambda表达式（也是callable对象）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">my_thread</span><span class="params">([]&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    do_something();</span></span></span><br><span class="line"><span class="function"><span class="params">    do_something_else();</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;)</span></span></span><br></pre></td></tr></table></figure><ul><li>方法三：传入函数指针和参数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::thread(f, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>方法四：传入对象的成员函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">do_lengthy_work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">X my_x;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(&amp;X::do_lengthy_work, &amp;my_x)</span></span>;<span class="comment">// 后面可以加上一系列参数，如果需要的话</span></span><br></pre></td></tr></table></figure><h2 id="std-thread成员函数"><a href="#std-thread成员函数" class="headerlink" title="std::thread成员函数"></a><code>std::thread</code>成员函数</h2><h3 id="join"><a href="#join" class="headerlink" title=".join()"></a><code>.join()</code></h3><p><strong>作用：</strong></p><ul><li>等待线程执行完毕</li><li>清除对象内部与具体线程相关的内存，当前对象将不再和任何线程相关联</li><li>只能调用一次 <code>.join()</code> ，调用后 <code>.joinable()</code> 将永远返回 <code>false</code></li></ul><p><strong>例子：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (t.joinable()) &#123;</span><br><span class="line">    t.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="detach"><a href="#detach" class="headerlink" title=".detach()"></a><code>.detach()</code></h3><p><strong>作用：</strong></p><ul><li>把线程放在后台运行，线程的所有权和控制权交给 <code>C++ Runtime Library</code></li><li>当前对象将不再和任何线程相关联</li><li>调用后 <code>.joinable()</code> 将永远返回 <code>false</code></li></ul><h2 id="thread-function传参可能遇到的问题"><a href="#thread-function传参可能遇到的问题" class="headerlink" title="thread function传参可能遇到的问题"></a>thread function传参可能遇到的问题</h2><h3 id="问题一：传入临时的callable对象，编译器会误以为是函数声明"><a href="#问题一：传入临时的callable对象，编译器会误以为是函数声明" class="headerlink" title="问题一：传入临时的callable对象，编译器会误以为是函数声明"></a>问题一：传入临时的callable对象，编译器会误以为是函数声明</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">my_thread</span><span class="params">(background_task())</span></span></span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong>用圆括号或者花括号加以说明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">my_thread</span><span class="params">((background_task()))</span></span>;</span><br><span class="line"><span class="built_in">std</span>::thread my_thread&#123;background_task()&#125;;</span><br></pre></td></tr></table></figure><h3 id="问题二：因为传指针or局部变量的引用，导致thread-function可能访问已经被销毁的内容"><a href="#问题二：因为传指针or局部变量的引用，导致thread-function可能访问已经被销毁的内容" class="headerlink" title="问题二：因为传指针or局部变量的引用，导致thread function可能访问已经被销毁的内容"></a>问题二：因为传指针or局部变量的引用，导致thread function可能访问已经被销毁的内容</h3><p><strong>解决方案：</strong></p><ul><li>把需要使用的临时变量<code>copy</code>到<code>std::thread</code>内部，不要和局部上下文共享临时变量</li><li>使用<code>RAII</code>（资源获取即初始化）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">thread_guard</span> &#123;</span></span><br><span class="line">    <span class="built_in">std</span>::thread &amp;t;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">thread_guard</span><span class="params">(<span class="built_in">std</span>::thread &amp;t_)</span>: <span class="title">t</span><span class="params">(t_)</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Destructor</span></span><br><span class="line">    ~thread_guard() &#123;</span><br><span class="line">        <span class="keyword">if</span> (t.joinable()) &#123;</span><br><span class="line">            t.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Copy Constructor</span></span><br><span class="line">    thread_guard(<span class="keyword">const</span> thread_guard &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Copy-assignment Operator</span></span><br><span class="line">    thread_guard&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> thread_guard &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">func</span>;</span> <span class="comment">// a callable object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> f &#123;</span><br><span class="line">    <span class="keyword">int</span> some_local_stats = <span class="number">0</span>;</span><br><span class="line">    <span class="function">func <span class="title">my_func</span><span class="params">(some_local_stats)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(my_func)</span></span>;</span><br><span class="line">    <span class="function">thread_guard <span class="title">g</span><span class="params">(t)</span></span>;</span><br><span class="line">    </span><br><span class="line">    do_something_in_current_thread();<span class="comment">// 函数返回时，自动调用thread_guard的析构函数，等待线程join</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题三：因为传指针or局部变量的引用，导致在thread-function入参时因强制类型转换而访问已经被销毁的内容"><a href="#问题三：因为传指针or局部变量的引用，导致在thread-function入参时因强制类型转换而访问已经被销毁的内容" class="headerlink" title="问题三：因为传指针or局部变量的引用，导致在thread function入参时因强制类型转换而访问已经被销毁的内容"></a>问题三：因为传指针or局部变量的引用，导致在thread function入参时因强制类型转换而访问已经被销毁的内容</h3><p>理解这个问题之前，需要先梳理一下 <code>std::thread</code> 对象创建后发生了什么：</p><ol><li>原线程：调用 <code>std::thread</code> 的构造函数or拷贝赋值运算符</li><li>原线程：一个callable对象和它的参数被拷贝到新创建的 <code>std::thread</code> 内部</li><li>新线程：之前被拷贝的一系列参数，现在被传入callable对象（发生强制类型转换）</li><li>新线程：调用callable对象</li><li>……</li></ol><p>其中，第3步发生在新线程内，我们只知道它发生在第2步之后，却不知道具体的发生时间。</p><p>如果第3步发生时，原线程已经退出了相关上下文，那么新线程在传参时，可能对已经被销毁的内容进行类型转换操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">oops</span><span class="params">(<span class="keyword">int</span> some_param)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(buffer, <span class="string">"%i"</span>, some_param);</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(f, <span class="number">3</span>, buffer)</span></span>;<span class="comment">// const char*类型的buffer被转换成std::string的时机是未知的</span></span><br><span class="line">    t.detach();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong>由程序员显式完成传参操作，避免出现类型转换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">not_oops</span><span class="params">(<span class="keyword">int</span> some_param)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(buffer, <span class="string">"%i"</span>, some_param);</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(f, <span class="number">3</span>, <span class="built_in">std</span>::<span class="built_in">string</span>(buffer))</span></span>;<span class="comment">// 避免类型转换</span></span><br><span class="line">    t.detach();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题四：callable对象的参数要求传引用，但实际传入的是内部拷贝对象的引用（无法对原来的对象进行修改）"><a href="#问题四：callable对象的参数要求传引用，但实际传入的是内部拷贝对象的引用（无法对原来的对象进行修改）" class="headerlink" title="问题四：callable对象的参数要求传引用，但实际传入的是内部拷贝对象的引用（无法对原来的对象进行修改）"></a>问题四：callable对象的参数要求传引用，但实际传入的是内部拷贝对象的引用（无法对原来的对象进行修改）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_data_for_widget</span><span class="params">(widget_id w, widget_data &amp;data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">oops_again</span><span class="params">(widget_id w)</span> </span>&#123;</span><br><span class="line">    widget_data data;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(update_data_for_widget, w, data)</span></span>;<span class="comment">// 传入的data被拷贝，拷贝后的临时data的引用被传入update函数</span></span><br><span class="line">    display_status();</span><br><span class="line">    t.join();</span><br><span class="line">    process_widget_data(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong>使用 <code>std::ref()</code> 声明传引用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(update_data_for_widget, w, <span class="built_in">std</span>::ref(data))</span></span>;</span><br></pre></td></tr></table></figure><h2 id="使用上的技巧"><a href="#使用上的技巧" class="headerlink" title="使用上的技巧"></a>使用上的技巧</h2><h3 id="Trick-1：传入只可move不可copy的对象"><a href="#Trick-1：传入只可move不可copy的对象" class="headerlink" title="Trick 1：传入只可move不可copy的对象"></a>Trick 1：传入只可move不可copy的对象</h3><p>在这种情况下，如果原对象是无名的临时对象，那么 <code>move</code> 操作是自动完成的。</p><p>如果原对象是命名对象（左值引用），那就需要用 <code>std::move()</code> 来将它转换成（右值引用），之后的的拷贝就自动是 <code>move</code> 完成的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_big_object</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;big_object&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;big_object&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> big_object)</span></span>;<span class="comment">// std::unique_ptr是典型的不可copy只能move对象，std::thread也是</span></span><br><span class="line">p-&gt;prepare_data(<span class="number">42</span>);</span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(process_big_object, <span class="built_in">std</span>::move(p))</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Trick-2：std-thread的move操作"><a href="#Trick-2：std-thread的move操作" class="headerlink" title="Trick 2：std::thread的move操作"></a>Trick 2：<code>std::thread</code>的move操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">some_function</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">some_other_function</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">t1</span><span class="params">(some_function)</span></span>;<span class="comment">// constructor</span></span><br><span class="line"><span class="built_in">std</span>::thread t2 = <span class="built_in">std</span>::move(t1);<span class="comment">// move-assignment operator</span></span><br><span class="line">t1 = <span class="built_in">std</span>::thread(some_other_function);<span class="comment">// constructor, then move-assignment operator</span></span><br><span class="line"><span class="built_in">std</span>::thread t3;<span class="comment">// default constructor</span></span><br><span class="line">t3 = <span class="built_in">std</span>::move(t2);<span class="comment">// move-assignment operator</span></span><br><span class="line">t1 = <span class="built_in">std</span>::move(t3);<span class="comment">// Error: std::terminate()</span></span><br></pre></td></tr></table></figure><p>上述程序的最后一行中，对象t1已经与一个正在运行的线程互相绑定，不能接受<code>move</code>的对象，因此整个程序会调用 <code>std::terminate()</code> 退出。</p><p>不能 <code>move</code> 给已经绑定了线程的对象。</p><h3 id="Trick-3：在函数传参和返回时使用转移std-thread的所有权"><a href="#Trick-3：在函数传参和返回时使用转移std-thread的所有权" class="headerlink" title="Trick 3：在函数传参和返回时使用转移std::thread的所有权"></a>Trick 3：在函数传参和返回时使用转移<code>std::thread</code>的所有权</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">some_function</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::thread(some_function);<span class="comment">// 自动调用move</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">some_other_function</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(some_other_function, <span class="number">32</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> t;<span class="comment">// 自动调用move</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="built_in">std</span>::thread t)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">some_function</span><span class="params">()</span></span>;</span><br><span class="line">    f(<span class="built_in">std</span>::thread(some_function));<span class="comment">// 自动调用move</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(some_function)</span></span>;</span><br><span class="line">    f(<span class="built_in">std</span>::move(t));<span class="comment">// 显式调用move</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Trick-4：运行时确定新开线程的个数"><a href="#Trick-4：运行时确定新开线程的个数" class="headerlink" title="Trick 4：运行时确定新开线程的个数"></a>Trick 4：运行时确定新开线程的个数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> hardware_threads = <span class="built_in">std</span>::thread::hardware_concurrency();</span><br></pre></td></tr></table></figure><h3 id="Trick-5：获取线程id"><a href="#Trick-5：获取线程id" class="headerlink" title="Trick 5：获取线程id"></a>Trick 5：获取线程id</h3><p>线程id有个单独定义的类型，<code>std::thread::id</code> ，该类对象有如下性质：</p><ul><li>调用 <code>std::thread</code> 对象的 <code>get_id()</code> 方法可以得到一个 <code>std::thread::id</code> 类型对象</li><li><code>std::thread::id</code> 支持大小比较和相等判断，<ul><li>相等即为同一线程</li><li>若a&lt;b，b&lt;c，那么a&lt;c</li></ul></li><li>如果当前对象不与任何正在运行的线程绑定，那么 <code>get_id()</code> 返回一个默认构造的 <code>std::thread::id</code> 对象</li><li><code>get_id()</code> 可以被 <code>std::cout</code> 打印出来，但它的值没有任何具体意义，标准库也不对它的具体实现类型作保证</li></ul><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ul><li>C++ Concurrency in Action, 2nd Edition</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;lt-thread-gt-头文件的作用&quot;&gt;&lt;a href=&quot;#lt-thread-gt-头文件的作用&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;thread&amp;gt;头文件的作用&quot;&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;thread&amp;gt;&lt;/code&gt;头文件的作用&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;lt;thread&amp;gt;&lt;/code&gt;  是C++11新引入标准库基础设施，提供对多线程操作的支持。&lt;/p&gt;
&lt;p&gt;我们可以用 &lt;code&gt;std::thread&lt;/code&gt; 来控制线程的创建、运行、回收。&lt;/p&gt;
&lt;p&gt;学习 &lt;code&gt;std::thread&lt;/code&gt; 的用法是了解C++多线程编程的第一步。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reading Notes" scheme="http://xinlu.cool/categories/Reading-Notes/"/>
    
    
      <category term="C++" scheme="http://xinlu.cool/tags/C/"/>
    
      <category term="Concurrency" scheme="http://xinlu.cool/tags/Concurrency/"/>
    
      <category term="C++ Concurrency in Action" scheme="http://xinlu.cool/tags/C-Concurrency-in-Action/"/>
    
  </entry>
  
</feed>
