<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xinlu&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xinlu.cool/"/>
  <updated>2020-06-30T16:48:43.267Z</updated>
  <id>http://xinlu.cool/</id>
  
  <author>
    <name>xinlu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>调包侠工具箱：tf.data.Dataset</title>
    <link href="http://xinlu.cool/Machine-Learning/tf-data-Dataset/"/>
    <id>http://xinlu.cool/Machine-Learning/tf-data-Dataset/</id>
    <published>2020-06-29T07:36:29.000Z</published>
    <updated>2020-06-30T16:48:43.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是个啥？"><a href="#这是个啥？" class="headerlink" title="这是个啥？"></a>这是个啥？</h2><ul><li>tf.data.Dataset包含数据集导入、预处理、导出的高级api</li><li>适用于数据量可以分批导入内存的场景</li><li>可以通过简单的api实现流水线处理</li><li><strong>这货本质是个封装程度非常高的IO Adapter</strong></li></ul><a id="more"></a><h2 id="Dataset创建"><a href="#Dataset创建" class="headerlink" title="Dataset创建"></a>Dataset创建</h2><h3 id="与导入操作有关的api"><a href="#与导入操作有关的api" class="headerlink" title="与导入操作有关的api"></a>与导入操作有关的api</h3><ul><li>从<code>python list</code>导入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset = tf.data.Dataset.from_tensor_slices([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><ul><li>从<code>txt</code>文件导入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataset = tf.data.TextLineDataset([</span><br><span class="line">  <span class="string">"file1.txt"</span>, </span><br><span class="line">  <span class="string">"file2.txt"</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li>从<code>TFRecord</code>导入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataset = tf.data.TFRecordDataset([</span><br><span class="line">    <span class="string">"file1.tfrecords"</span>, </span><br><span class="line">    <span class="string">"file2.tfrecords"</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li>从多文件导入（正则表达式）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset = tf.data.Dataset.list_files(<span class="string">"/path/*.txt"</span>)</span><br></pre></td></tr></table></figure><ul><li>其他导入方式<ul><li><code>tf.data.FixedLengthRecordDataset</code></li><li><code>tf.data.Dataset.from_generator</code></li></ul></li></ul><h3 id="一些优雅的导入姿势"><a href="#一些优雅的导入姿势" class="headerlink" title="一些优雅的导入姿势"></a>一些优雅的导入姿势</h3><ul><li>导入一个tuple</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Slicing a tuple of 1D tensors produces tuple elements containing scalar tensors.</span></span><br><span class="line">dataset = tf.data.Dataset.from_tensor_slices((</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>], </span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>], </span><br><span class="line">  [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">))</span><br><span class="line">list(dataset.as_numpy_iterator())</span><br><span class="line"><span class="comment"># [(1, 3, 5), (2, 4, 6)]</span></span><br></pre></td></tr></table></figure><ul><li>导入两个tuple</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Two tensors can be combined into one Dataset object.</span></span><br><span class="line">features = tf.constant([[<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>]]) <span class="comment"># ==&gt; 3x2 tensor</span></span><br><span class="line">labels = tf.constant([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>]) <span class="comment"># ==&gt; 3x1 tensor</span></span><br><span class="line">dataset = Dataset.from_tensor_slices((features, labels))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Both the features and the labels tensors can be converted</span></span><br><span class="line"><span class="comment"># to a Dataset object separately and combined after.</span></span><br><span class="line">features_dataset = Dataset.from_tensor_slices(features)</span><br><span class="line">labels_dataset = Dataset.from_tensor_slices(labels)</span><br><span class="line">dataset = Dataset.zip((features_dataset, labels_dataset))</span><br></pre></td></tr></table></figure><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><h3 id="Dataset级别的api"><a href="#Dataset级别的api" class="headerlink" title="Dataset级别的api"></a>Dataset级别的api</h3><ul><li><p><code>.apply()</code></p><ul><li><p>Args:</p><ul><li>transformation func, from Dataset to Dataset</li></ul></li><li><p>Rets:</p><ul><li>a new Dataset</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dataset_fn</span><span class="params">(ds)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> ds.filter(<span class="keyword">lambda</span> x: x &lt; <span class="number">5</span>)</span><br><span class="line">dataset = dataset.apply(dataset_fn)</span><br></pre></td></tr></table></figure><ul><li><code>.batch()</code><ul><li>Args:<ul><li>batch_size</li><li>drop_remainder=False</li></ul></li><li>新Dataset输出的数据新增一个维度，大小为batch_size</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset = dataset.batch(<span class="number">3</span>, drop_remainder=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li><code>.shard()</code><ul><li>Args:<ul><li>num_shards</li><li>index</li></ul></li><li>Rets:<ul><li>一个新的Dataset，只包含原Dataset的<code>1/num_shards</code>数据，而且数据在原Dataset中的下标<code>% num_shards = index</code></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset_B = dataset_A.shard(num_shards=<span class="number">3</span>, index=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li><code>.concatenate()</code><ul><li>Args:<ul><li>another Dataset</li></ul></li><li>Rets:<ul><li>a new Dataset</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = tf.data.Dataset.range(<span class="number">1</span>, <span class="number">4</span>)  <span class="comment"># ==&gt; [ 1, 2, 3 ]</span></span><br><span class="line">b = tf.data.Dataset.range(<span class="number">4</span>, <span class="number">8</span>)  <span class="comment"># ==&gt; [ 4, 5, 6, 7 ]</span></span><br><span class="line">ds = a.concatenate(b)</span><br><span class="line"><span class="comment"># ==&gt; [ 1, 2, 3, 4, 5, 6, 7 ]</span></span><br></pre></td></tr></table></figure><ul><li><code>Dataset.zip()</code><ul><li>Args:<ul><li>(Dataset, Dataset, …)</li></ul></li><li>Rets:<ul><li>a new Dataset</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = tf.data.Dataset.range(<span class="number">1</span>, <span class="number">4</span>)  <span class="comment"># ==&gt; [ 1, 2, 3 ]</span></span><br><span class="line">b = tf.data.Dataset.range(<span class="number">4</span>, <span class="number">7</span>)  <span class="comment"># ==&gt; [ 4, 5, 6 ]</span></span><br><span class="line">ds = tf.data.Dataset.zip((a, b))</span><br><span class="line"><span class="comment"># ==&gt; [(1, 4), (2, 5), (3, 6)]</span></span><br></pre></td></tr></table></figure><h3 id="字段级别的api"><a href="#字段级别的api" class="headerlink" title="字段级别的api"></a>字段级别的api</h3><ul><li><code>.filter()</code><ul><li>Args:<ul><li>predicate(func)</li></ul></li><li>Rets:<ul><li>a new Dataset, element by predicate is True</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset = dataset.filter(<span class="keyword">lambda</span> x: x &lt; <span class="number">3</span>)</span><br></pre></td></tr></table></figure><ul><li><code>.map()</code><ul><li>Args:<ul><li>map_func</li><li>num_parallel_calls(=<code>tf.data.experimental.AUTOTUNE</code>)</li><li>deterministic</li></ul></li><li>Rets:<ul><li>a new Dataset</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataset = Dataset.range(<span class="number">1</span>, <span class="number">6</span>)  <span class="comment"># ==&gt; [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line">dataset = dataset.map(<span class="keyword">lambda</span> x: x + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li><code>interleave()</code><ul><li>Args:<ul><li>map_func</li><li>cycle_length=AUTOTUNE</li><li>block_length=1</li><li>num_parallel_calls(=<code>tf.data.experimental.AUTOTUNE</code>)</li><li>deterministic=None</li></ul></li><li>Rets:<ul><li>a new Dataset</li></ul></li></ul></li></ul><p>如何理解：</p><ol><li>遍历原Dataset，用<code>map_func</code>函数处理每个字段，该过程并行度由<code>cycle_length</code>控制</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设cycle_length = 3</span></span><br><span class="line">[map_func(x1), map_func(x2), map_func(x3)] </span><br><span class="line">  =&gt; [res1, res2, res3] </span><br><span class="line">  =&gt; cycle1</span><br><span class="line"></span><br><span class="line">[map_func(x4), map_func(x5), map_func(x6)] </span><br><span class="line">  =&gt; [res4, res5, res6] </span><br><span class="line">  =&gt; cycle2</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">==&gt; cycles = [cycle1, cycle2, cycle3, ...]</span><br></pre></td></tr></table></figure><ol start="2"><li>遍历cycles，取每个cycle的<code>block_length</code>个元素后，换下一个cycle继续读取，环形遍历直到所有元素都被取出</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设block_length = 2</span></span><br><span class="line"></span><br><span class="line">cycle1 =&gt; [res1, res2]</span><br><span class="line">cycle2 =&gt; [res4, res5]</span><br><span class="line"></span><br><span class="line">cycle1 =&gt; [res3]</span><br><span class="line">cycle2 =&gt; [res6]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终结果被flatten</span></span><br><span class="line">==&gt; [res1, res2, res4, res5, res3, res6]</span><br></pre></td></tr></table></figure><ol start="3"><li>最终获得flatten后的新Dataset</li></ol><h2 id="Dataset导出"><a href="#Dataset导出" class="headerlink" title="Dataset导出"></a>Dataset导出</h2><ul><li><code>.prefetch()</code><ul><li>Args:<ul><li>buffer_size</li></ul></li><li>Rets:<ul><li>a new Dataset</li></ul></li></ul></li></ul><p>官方建议在所有Dataset的处理结束后加上<code>.prefetch()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预取两个字段</span></span><br><span class="line">dataset = dataset.prefetch(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预取两个batch</span></span><br><span class="line">dataset = dataset.batch(<span class="number">20</span>).prefetch(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li><code>.shuffle()</code><ul><li>Args:<ul><li>buffer_size</li><li>seed=None</li><li>reshuffle_each_iteration=None</li></ul></li><li>Rets:<ul><li>a new Dataset</li></ul></li></ul></li></ul><p>官方建议<code>buffer_size</code> &gt;= Dataset数据量</p><ul><li><code>.enumerate()</code><ul><li>Args:<ul><li>start=0</li></ul></li><li>Rets:<ul><li>a new Dataset，每个输出结果多了一个表示索引的维度</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dataset = tf.data.Dataset.from_tensor_slices([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">dataset = dataset.enumerate(start=<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> dataset.as_numpy_iterator():</span><br><span class="line">  print(element)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">(5, 1)</span></span><br><span class="line"><span class="string">(6, 2)</span></span><br><span class="line"><span class="string">(7, 3)</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><ul><li><code>.as_numpy_iterator()</code><ul><li>Rets:<ul><li>a new Dataset</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dataset = tf.data.Dataset.from_tensor_slices([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> dataset.as_numpy_iterator():</span><br><span class="line">  print(element)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;这是个啥？&quot;&gt;&lt;a href=&quot;#这是个啥？&quot; class=&quot;headerlink&quot; title=&quot;这是个啥？&quot;&gt;&lt;/a&gt;这是个啥？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;tf.data.Dataset包含数据集导入、预处理、导出的高级api&lt;/li&gt;
&lt;li&gt;适用于数据量可以分批导入内存的场景&lt;/li&gt;
&lt;li&gt;可以通过简单的api实现流水线处理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;这货本质是个封装程度非常高的IO Adapter&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://xinlu.cool/categories/Machine-Learning/"/>
    
    
      <category term="TensorFlow" scheme="http://xinlu.cool/tags/TensorFlow/"/>
    
      <category term="Keras" scheme="http://xinlu.cool/tags/Keras/"/>
    
  </entry>
  
  <entry>
    <title>C++并发：从std::thread()开始</title>
    <link href="http://xinlu.cool/Reading-Notes/cppconcurrency-1/"/>
    <id>http://xinlu.cool/Reading-Notes/cppconcurrency-1/</id>
    <published>2020-06-19T20:43:36.000Z</published>
    <updated>2020-06-30T16:48:23.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lt-thread-gt-头文件的作用"><a href="#lt-thread-gt-头文件的作用" class="headerlink" title="&lt;thread&gt;头文件的作用"></a><code>&lt;thread&gt;</code>头文件的作用</h2><p><code>&lt;thread&gt;</code>  是C++11新引入标准库基础设施，提供对多线程操作的支持。</p><p>我们可以用 <code>std::thread</code> 来控制线程的创建、运行、回收。</p><p>学习 <code>std::thread</code> 的用法是了解C++多线程编程的第一步。</p><a id="more"></a><h2 id="构造std-thread对象"><a href="#构造std-thread对象" class="headerlink" title="构造std::thread对象"></a>构造<code>std::thread</code>对象</h2><ul><li>方法一：传入函数对象</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">background_task</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        do_something();</span><br><span class="line">        do_something_else();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">background_task f;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">my_thread</span><span class="params">(f)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>在这种情况下，函数对象先被 <code>copy</code> 到 <code>std::thread</code> 对象的内部，然后再传参、被调用</strong></p><ul><li>方法二：传入lambda表达式（也是callable对象）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">my_thread</span><span class="params">([]&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    do_something();</span></span></span><br><span class="line"><span class="function"><span class="params">    do_something_else();</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;)</span></span></span><br></pre></td></tr></table></figure><ul><li>方法三：传入函数指针和参数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::thread(f, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>方法四：传入对象的成员函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">do_lengthy_work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">X my_x;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(&amp;X::do_lengthy_work, &amp;my_x)</span></span>;<span class="comment">// 后面可以加上一系列参数，如果需要的话</span></span><br></pre></td></tr></table></figure><h2 id="std-thread成员函数"><a href="#std-thread成员函数" class="headerlink" title="std::thread成员函数"></a><code>std::thread</code>成员函数</h2><h3 id="join"><a href="#join" class="headerlink" title=".join()"></a><code>.join()</code></h3><p><strong>作用：</strong></p><ul><li>等待线程执行完毕</li><li>清除对象内部与具体线程相关的内存，当前对象将不再和任何线程相关联</li><li>只能调用一次 <code>.join()</code> ，调用后 <code>.joinable()</code> 将永远返回 <code>false</code></li></ul><p><strong>例子：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (t.joinable()) &#123;</span><br><span class="line">    t.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="detach"><a href="#detach" class="headerlink" title=".detach()"></a><code>.detach()</code></h3><p><strong>作用：</strong></p><ul><li>把线程放在后台运行，线程的所有权和控制权交给 <code>C++ Runtime Library</code></li><li>当前对象将不再和任何线程相关联</li><li>调用后 <code>.joinable()</code> 将永远返回 <code>false</code></li></ul><h2 id="thread-function传参可能遇到的问题"><a href="#thread-function传参可能遇到的问题" class="headerlink" title="thread function传参可能遇到的问题"></a>thread function传参可能遇到的问题</h2><h3 id="问题一：传入临时的callable对象，编译器会误以为是函数声明"><a href="#问题一：传入临时的callable对象，编译器会误以为是函数声明" class="headerlink" title="问题一：传入临时的callable对象，编译器会误以为是函数声明"></a>问题一：传入临时的callable对象，编译器会误以为是函数声明</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">my_thread</span><span class="params">(background_task())</span></span></span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong>用圆括号或者花括号加以说明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">my_thread</span><span class="params">((background_task()))</span></span>;</span><br><span class="line"><span class="built_in">std</span>::thread my_thread&#123;background_task()&#125;;</span><br></pre></td></tr></table></figure><h3 id="问题二：因为传指针or局部变量的引用，导致thread-function可能访问已经被销毁的内容"><a href="#问题二：因为传指针or局部变量的引用，导致thread-function可能访问已经被销毁的内容" class="headerlink" title="问题二：因为传指针or局部变量的引用，导致thread function可能访问已经被销毁的内容"></a>问题二：因为传指针or局部变量的引用，导致thread function可能访问已经被销毁的内容</h3><p><strong>解决方案：</strong></p><ul><li>把需要使用的临时变量<code>copy</code>到<code>std::thread</code>内部，不要和局部上下文共享临时变量</li><li>使用<code>RAII</code>（资源获取即初始化）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">thread_guard</span> &#123;</span></span><br><span class="line">    <span class="built_in">std</span>::thread &amp;t;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">thread_guard</span><span class="params">(<span class="built_in">std</span>::thread &amp;t_)</span>: <span class="title">t</span><span class="params">(t_)</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Destructor</span></span><br><span class="line">    ~thread_guard() &#123;</span><br><span class="line">        <span class="keyword">if</span> (t.joinable()) &#123;</span><br><span class="line">            t.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Copy Constructor</span></span><br><span class="line">    thread_guard(<span class="keyword">const</span> thread_guard &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Copy-assignment Operator</span></span><br><span class="line">    thread_guard&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> thread_guard &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">func</span>;</span> <span class="comment">// a callable object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> f &#123;</span><br><span class="line">    <span class="keyword">int</span> some_local_stats = <span class="number">0</span>;</span><br><span class="line">    <span class="function">func <span class="title">my_func</span><span class="params">(some_local_stats)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(my_func)</span></span>;</span><br><span class="line">    <span class="function">thread_guard <span class="title">g</span><span class="params">(t)</span></span>;</span><br><span class="line">    </span><br><span class="line">    do_something_in_current_thread();<span class="comment">// 函数返回时，自动调用thread_guard的析构函数，等待线程join</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题三：因为传指针or局部变量的引用，导致在thread-function入参时因强制类型转换而访问已经被销毁的内容"><a href="#问题三：因为传指针or局部变量的引用，导致在thread-function入参时因强制类型转换而访问已经被销毁的内容" class="headerlink" title="问题三：因为传指针or局部变量的引用，导致在thread function入参时因强制类型转换而访问已经被销毁的内容"></a>问题三：因为传指针or局部变量的引用，导致在thread function入参时因强制类型转换而访问已经被销毁的内容</h3><p>理解这个问题之前，需要先梳理一下 <code>std::thread</code> 对象创建后发生了什么：</p><ol><li>原线程：调用 <code>std::thread</code> 的构造函数or拷贝赋值运算符</li><li>原线程：一个callable对象和它的参数被拷贝到新创建的 <code>std::thread</code> 内部</li><li>新线程：之前被拷贝的一系列参数，现在被传入callable对象（发生强制类型转换）</li><li>新线程：调用callable对象</li><li>……</li></ol><p>其中，第3步发生在新线程内，我们只知道它发生在第2步之后，却不知道具体的发生时间。</p><p>如果第3步发生时，原线程已经退出了相关上下文，那么新线程在传参时，可能对已经被销毁的内容进行类型转换操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">oops</span><span class="params">(<span class="keyword">int</span> some_param)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(buffer, <span class="string">"%i"</span>, some_param);</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(f, <span class="number">3</span>, buffer)</span></span>;<span class="comment">// const char*类型的buffer被转换成std::string的时机是未知的</span></span><br><span class="line">    t.detach();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong>由程序员显式完成传参操作，避免出现类型转换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">not_oops</span><span class="params">(<span class="keyword">int</span> some_param)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(buffer, <span class="string">"%i"</span>, some_param);</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(f, <span class="number">3</span>, <span class="built_in">std</span>::<span class="built_in">string</span>(buffer))</span></span>;<span class="comment">// 避免类型转换</span></span><br><span class="line">    t.detach();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题四：callable对象的参数要求传引用，但实际传入的是内部拷贝对象的引用（无法对原来的对象进行修改）"><a href="#问题四：callable对象的参数要求传引用，但实际传入的是内部拷贝对象的引用（无法对原来的对象进行修改）" class="headerlink" title="问题四：callable对象的参数要求传引用，但实际传入的是内部拷贝对象的引用（无法对原来的对象进行修改）"></a>问题四：callable对象的参数要求传引用，但实际传入的是内部拷贝对象的引用（无法对原来的对象进行修改）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_data_for_widget</span><span class="params">(widget_id w, widget_data &amp;data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">oops_again</span><span class="params">(widget_id w)</span> </span>&#123;</span><br><span class="line">    widget_data data;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(update_data_for_widget, w, data)</span></span>;<span class="comment">// 传入的data被拷贝，拷贝后的临时data的引用被传入update函数</span></span><br><span class="line">    display_status();</span><br><span class="line">    t.join();</span><br><span class="line">    process_widget_data(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong>使用 <code>std::ref()</code> 声明传引用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(update_data_for_widget, w, <span class="built_in">std</span>::ref(data))</span></span>;</span><br></pre></td></tr></table></figure><h2 id="使用上的技巧"><a href="#使用上的技巧" class="headerlink" title="使用上的技巧"></a>使用上的技巧</h2><h3 id="Trick-1：传入只可move不可copy的对象"><a href="#Trick-1：传入只可move不可copy的对象" class="headerlink" title="Trick 1：传入只可move不可copy的对象"></a>Trick 1：传入只可move不可copy的对象</h3><p>在这种情况下，如果原对象是无名的临时对象，那么 <code>move</code> 操作是自动完成的。</p><p>如果原对象是命名对象（左值引用），那就需要用 <code>std::move()</code> 来将它转换成（右值引用），之后的的拷贝就自动是 <code>move</code> 完成的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_big_object</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;big_object&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;big_object&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> big_object)</span></span>;<span class="comment">// std::unique_ptr是典型的不可copy只能move对象，std::thread也是</span></span><br><span class="line">p-&gt;prepare_data(<span class="number">42</span>);</span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(process_big_object, <span class="built_in">std</span>::move(p))</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Trick-2：std-thread的move操作"><a href="#Trick-2：std-thread的move操作" class="headerlink" title="Trick 2：std::thread的move操作"></a>Trick 2：<code>std::thread</code>的move操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">some_function</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">some_other_function</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">t1</span><span class="params">(some_function)</span></span>;<span class="comment">// constructor</span></span><br><span class="line"><span class="built_in">std</span>::thread t2 = <span class="built_in">std</span>::move(t1);<span class="comment">// move-assignment operator</span></span><br><span class="line">t1 = <span class="built_in">std</span>::thread(some_other_function);<span class="comment">// constructor, then move-assignment operator</span></span><br><span class="line"><span class="built_in">std</span>::thread t3;<span class="comment">// default constructor</span></span><br><span class="line">t3 = <span class="built_in">std</span>::move(t2);<span class="comment">// move-assignment operator</span></span><br><span class="line">t1 = <span class="built_in">std</span>::move(t3);<span class="comment">// Error: std::terminate()</span></span><br></pre></td></tr></table></figure><p>上述程序的最后一行中，对象t1已经与一个正在运行的线程互相绑定，不能接受<code>move</code>的对象，因此整个程序会调用 <code>std::terminate()</code> 退出。</p><p>不能 <code>move</code> 给已经绑定了线程的对象。</p><h3 id="Trick-3：在函数传参和返回时使用转移std-thread的所有权"><a href="#Trick-3：在函数传参和返回时使用转移std-thread的所有权" class="headerlink" title="Trick 3：在函数传参和返回时使用转移std::thread的所有权"></a>Trick 3：在函数传参和返回时使用转移<code>std::thread</code>的所有权</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">some_function</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::thread(some_function);<span class="comment">// 自动调用move</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">some_other_function</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(some_other_function, <span class="number">32</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> t;<span class="comment">// 自动调用move</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="built_in">std</span>::thread t)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">some_function</span><span class="params">()</span></span>;</span><br><span class="line">    f(<span class="built_in">std</span>::thread(some_function));<span class="comment">// 自动调用move</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(some_function)</span></span>;</span><br><span class="line">    f(<span class="built_in">std</span>::move(t));<span class="comment">// 显式调用move</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Trick-4：运行时确定新开线程的个数"><a href="#Trick-4：运行时确定新开线程的个数" class="headerlink" title="Trick 4：运行时确定新开线程的个数"></a>Trick 4：运行时确定新开线程的个数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> hardware_threads = <span class="built_in">std</span>::thread::hardware_concurrency();</span><br></pre></td></tr></table></figure><h3 id="Trick-5：获取线程id"><a href="#Trick-5：获取线程id" class="headerlink" title="Trick 5：获取线程id"></a>Trick 5：获取线程id</h3><p>线程id有个单独定义的类型，<code>std::thread::id</code> ，该类对象有如下性质：</p><ul><li>调用 <code>std::thread</code> 对象的 <code>get_id()</code> 方法可以得到一个 <code>std::thread::id</code> 类型对象</li><li><code>std::thread::id</code> 支持大小比较和相等判断，<ul><li>相等即为同一线程</li><li>若a&lt;b，b&lt;c，那么a&lt;c</li></ul></li><li>如果当前对象不与任何正在运行的线程绑定，那么 <code>get_id()</code> 返回一个默认构造的 <code>std::thread::id</code> 对象</li><li><code>get_id()</code> 可以被 <code>std::cout</code> 打印出来，但它的值没有任何具体意义，标准库也不对它的具体实现类型作保证</li></ul><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ul><li>C++ Concurrency in Action, 2nd Edition</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;lt-thread-gt-头文件的作用&quot;&gt;&lt;a href=&quot;#lt-thread-gt-头文件的作用&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;thread&amp;gt;头文件的作用&quot;&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;thread&amp;gt;&lt;/code&gt;头文件的作用&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;lt;thread&amp;gt;&lt;/code&gt;  是C++11新引入标准库基础设施，提供对多线程操作的支持。&lt;/p&gt;
&lt;p&gt;我们可以用 &lt;code&gt;std::thread&lt;/code&gt; 来控制线程的创建、运行、回收。&lt;/p&gt;
&lt;p&gt;学习 &lt;code&gt;std::thread&lt;/code&gt; 的用法是了解C++多线程编程的第一步。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reading Notes" scheme="http://xinlu.cool/categories/Reading-Notes/"/>
    
    
      <category term="C++" scheme="http://xinlu.cool/tags/C/"/>
    
      <category term="Concurrency" scheme="http://xinlu.cool/tags/Concurrency/"/>
    
      <category term="C++ Concurrency in Action" scheme="http://xinlu.cool/tags/C-Concurrency-in-Action/"/>
    
  </entry>
  
</feed>
